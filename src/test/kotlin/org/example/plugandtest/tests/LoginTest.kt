package org.example.plugandtest.tests


import com.codeborne.selenide.Selenide.closeWebDriver
import io.qameta.allure.Description
import org.example.plugandtest.pages.LoginPage
import org.testng.annotations.AfterClass
import org.testng.annotations.BeforeClass
import org.testng.annotations.Test

import com.codeborne.selenide.Configuration
import com.codeborne.selenide.Selenide.closeWebDriver
import com.codeborne.selenide.logevents.SelenideLogger
import io.qameta.allure.selenide.AllureSelenide

import org.testng.Assert.assertTrue

/**
 * üìå Type de test : Tests d'interface utilisateur (UI tests)
 *
 * üéØ Objectif : V√©rifier que la fonctionnalit√© de login fonctionne comme pr√©vu pour un utilisateur :
 * - V√©rifier la pr√©sence des √©l√©ments (champ email, champ mot de passe, bouton login).
 * - Tester la gestion des erreurs avec des identifiants invalides.
 * - Assurer que l'interface r√©agit correctement aux actions de l'utilisateur.
 *
 * üõ†Ô∏è Outils :
 * - Selenium avec Selenide pour une interaction fluide avec l'UI.
 * - TestNG pour l'organisation et l'ex√©cution des tests.
 * - Allure pour g√©n√©rer des rapports de tests d√©taill√©s.
 */
class LoginTest {
    private lateinit var loginPage: LoginPage

    @BeforeClass
    fun setup() {
        Configuration.browser = "firefox"  // üî• D√©finit Firefox comme navigateur
        Configuration.browserSize = "1280x800" // Optionnel : D√©finit la taille de la fen√™tre
        SelenideLogger.addListener("allure", AllureSelenide())

        loginPage = LoginPage()
    }

    @Test
    @Description("V√©rifier que le bouton de connexion est visible")
    fun `login button should be visible`() {
        loginPage.openLoginPage()
        assertTrue(loginPage.clickLogin() != null, "Le bouton de connexion n'est pas visible")
    }

    @Test
    @Description("V√©rifier l'erreur avec des identifiants invalides")
    fun `login with invalid credentials should show error message`() {
        loginPage.openLoginPage()
            .enterUsername("invalid_user")
            .enterPassword("wrong_password")
            .clickLogin()

        assertTrue(loginPage.getErrorMessage().contains("Your username is invalid!"), "Le message d'erreur n'est pas affich√©")
    }

    @AfterClass
    fun teardown() {
        closeWebDriver()
    }
}















//Ces tests UI automatis√©s sont essentiels pour garantir que les utilisateurs
//finaux ne rencontreront pas de probl√®mes dans les fonctionnalit√©s de base, comme
//la connexion. Ils forment une premi√®re ligne de d√©fense pour la qualit√© de l'application.